// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/amr-mahmoud/mrktly/internal/infrastructure/repository/ent/predicate"
	"github.com/amr-mahmoud/mrktly/internal/infrastructure/repository/ent/topic"
)

// TopicUpdate is the builder for updating Topic entities.
type TopicUpdate struct {
	config
	hooks    []Hook
	mutation *TopicMutation
}

// Where appends a list predicates to the TopicUpdate builder.
func (tu *TopicUpdate) Where(ps ...predicate.Topic) *TopicUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TopicUpdate) SetName(s string) *TopicUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableName(s *string) *TopicUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TopicUpdate) SetDescription(s string) *TopicUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableDescription(s *string) *TopicUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TopicUpdate) ClearDescription() *TopicUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetArabicName sets the "arabic_name" field.
func (tu *TopicUpdate) SetArabicName(s string) *TopicUpdate {
	tu.mutation.SetArabicName(s)
	return tu
}

// SetNillableArabicName sets the "arabic_name" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableArabicName(s *string) *TopicUpdate {
	if s != nil {
		tu.SetArabicName(*s)
	}
	return tu
}

// ClearArabicName clears the value of the "arabic_name" field.
func (tu *TopicUpdate) ClearArabicName() *TopicUpdate {
	tu.mutation.ClearArabicName()
	return tu
}

// SetArabicDescription sets the "arabic_description" field.
func (tu *TopicUpdate) SetArabicDescription(s string) *TopicUpdate {
	tu.mutation.SetArabicDescription(s)
	return tu
}

// SetNillableArabicDescription sets the "arabic_description" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableArabicDescription(s *string) *TopicUpdate {
	if s != nil {
		tu.SetArabicDescription(*s)
	}
	return tu
}

// ClearArabicDescription clears the value of the "arabic_description" field.
func (tu *TopicUpdate) ClearArabicDescription() *TopicUpdate {
	tu.mutation.ClearArabicDescription()
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TopicUpdate) SetCreatedAt(t time.Time) *TopicUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableCreatedAt(t *time.Time) *TopicUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TopicUpdate) SetUpdatedAt(t time.Time) *TopicUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// Mutation returns the TopicMutation object of the builder.
func (tu *TopicUpdate) Mutation() *TopicMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TopicUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TopicUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TopicUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TopicUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TopicUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := topic.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

func (tu *TopicUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(topic.Table, topic.Columns, sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(topic.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(topic.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(topic.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.ArabicName(); ok {
		_spec.SetField(topic.FieldArabicName, field.TypeString, value)
	}
	if tu.mutation.ArabicNameCleared() {
		_spec.ClearField(topic.FieldArabicName, field.TypeString)
	}
	if value, ok := tu.mutation.ArabicDescription(); ok {
		_spec.SetField(topic.FieldArabicDescription, field.TypeString, value)
	}
	if tu.mutation.ArabicDescriptionCleared() {
		_spec.ClearField(topic.FieldArabicDescription, field.TypeString)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(topic.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(topic.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TopicUpdateOne is the builder for updating a single Topic entity.
type TopicUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TopicMutation
}

// SetName sets the "name" field.
func (tuo *TopicUpdateOne) SetName(s string) *TopicUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableName(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TopicUpdateOne) SetDescription(s string) *TopicUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableDescription(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TopicUpdateOne) ClearDescription() *TopicUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetArabicName sets the "arabic_name" field.
func (tuo *TopicUpdateOne) SetArabicName(s string) *TopicUpdateOne {
	tuo.mutation.SetArabicName(s)
	return tuo
}

// SetNillableArabicName sets the "arabic_name" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableArabicName(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetArabicName(*s)
	}
	return tuo
}

// ClearArabicName clears the value of the "arabic_name" field.
func (tuo *TopicUpdateOne) ClearArabicName() *TopicUpdateOne {
	tuo.mutation.ClearArabicName()
	return tuo
}

// SetArabicDescription sets the "arabic_description" field.
func (tuo *TopicUpdateOne) SetArabicDescription(s string) *TopicUpdateOne {
	tuo.mutation.SetArabicDescription(s)
	return tuo
}

// SetNillableArabicDescription sets the "arabic_description" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableArabicDescription(s *string) *TopicUpdateOne {
	if s != nil {
		tuo.SetArabicDescription(*s)
	}
	return tuo
}

// ClearArabicDescription clears the value of the "arabic_description" field.
func (tuo *TopicUpdateOne) ClearArabicDescription() *TopicUpdateOne {
	tuo.mutation.ClearArabicDescription()
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TopicUpdateOne) SetCreatedAt(t time.Time) *TopicUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableCreatedAt(t *time.Time) *TopicUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TopicUpdateOne) SetUpdatedAt(t time.Time) *TopicUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// Mutation returns the TopicMutation object of the builder.
func (tuo *TopicUpdateOne) Mutation() *TopicMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TopicUpdate builder.
func (tuo *TopicUpdateOne) Where(ps ...predicate.Topic) *TopicUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TopicUpdateOne) Select(field string, fields ...string) *TopicUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Topic entity.
func (tuo *TopicUpdateOne) Save(ctx context.Context) (*Topic, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TopicUpdateOne) SaveX(ctx context.Context) *Topic {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TopicUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TopicUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TopicUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := topic.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

func (tuo *TopicUpdateOne) sqlSave(ctx context.Context) (_node *Topic, err error) {
	_spec := sqlgraph.NewUpdateSpec(topic.Table, topic.Columns, sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Topic.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topic.FieldID)
		for _, f := range fields {
			if !topic.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != topic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(topic.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(topic.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(topic.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.ArabicName(); ok {
		_spec.SetField(topic.FieldArabicName, field.TypeString, value)
	}
	if tuo.mutation.ArabicNameCleared() {
		_spec.ClearField(topic.FieldArabicName, field.TypeString)
	}
	if value, ok := tuo.mutation.ArabicDescription(); ok {
		_spec.SetField(topic.FieldArabicDescription, field.TypeString, value)
	}
	if tuo.mutation.ArabicDescriptionCleared() {
		_spec.ClearField(topic.FieldArabicDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(topic.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(topic.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Topic{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
